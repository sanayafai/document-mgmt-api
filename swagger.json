{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/auth/register": {
      "post": {
        "operationId": "AuthController_register",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered"
          }
        },
        "summary": "Register a new user",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful, returns access token"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Login and receive JWT token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "UsersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new user (admin only)",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "operationId": "UsersController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of users"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all users (admin only)",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a single user by ID (admin only)",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "UsersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a user (admin only)",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "UsersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a user (admin only)",
        "tags": [
          "Users"
        ]
      }
    },
    "/documents": {
      "post": {
        "operationId": "DocumentsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDocumentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document uploaded"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upload a new document",
        "tags": [
          "Documents"
        ]
      },
      "get": {
        "operationId": "DocumentsController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of documents"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all documents",
        "tags": [
          "Documents"
        ]
      }
    },
    "/documents/{id}": {
      "get": {
        "operationId": "DocumentsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Single document"
          },
          "404": {
            "description": "Document not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a document by ID",
        "tags": [
          "Documents"
        ]
      },
      "patch": {
        "operationId": "DocumentsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDocumentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document updated"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a document",
        "tags": [
          "Documents"
        ]
      },
      "delete": {
        "operationId": "DocumentsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document deleted"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a document",
        "tags": [
          "Documents"
        ]
      }
    },
    "/documents/{id}/ingest": {
      "post": {
        "operationId": "DocumentsController_ingest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document ingested"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Ingest a document (simulate embeddings)",
        "tags": [
          "Documents"
        ]
      }
    },
    "/ingestion/trigger/{id}": {
      "post": {
        "operationId": "IngestionController_triggerOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document ingested successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Trigger ingestion for a single document by ID",
        "tags": [
          "Ingestion"
        ]
      }
    },
    "/ingestion/bulk": {
      "post": {
        "operationId": "IngestionController_triggerBulk",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bulk ingestion completed"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Trigger ingestion for all pending documents",
        "tags": [
          "Ingestion"
        ]
      }
    },
    "/ingestion/status": {
      "get": {
        "operationId": "IngestionController_getStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Ingestion status retrieved"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get ingestion status summary",
        "tags": [
          "Ingestion"
        ]
      }
    },
    "/qa": {
      "post": {
        "operationId": "QaController_ask",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AskQuestionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Answer returned successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Ask a question and get an answer based on ingested documents",
        "tags": [
          "QA"
        ]
      }
    }
  },
  "info": {
    "title": "Document Q&A API",
    "description": "API for uploading, ingesting, and querying documents",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "RegisterDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address for the new user",
            "example": "newuser@example.com"
          },
          "password": {
            "type": "string",
            "description": "Password for the new user (min 6 characters)",
            "example": "strongPass123",
            "minLength": 6
          },
          "role": {
            "type": "string",
            "description": "Role assigned to the new user",
            "example": "editor",
            "enum": [
              "admin",
              "editor",
              "viewer"
            ]
          }
        },
        "required": [
          "email",
          "password",
          "role"
        ]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Registered email address of the user",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password (minimum 6 characters)",
            "example": "securePassword123",
            "minLength": 6
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "example": "password123"
          },
          "role": {
            "type": "string",
            "example": "admin",
            "enum": [
              "admin",
              "editor",
              "viewer"
            ]
          }
        },
        "required": [
          "email",
          "password",
          "role"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Role to assign to the user",
            "example": "editor",
            "enum": [
              "admin",
              "editor",
              "viewer"
            ]
          }
        }
      },
      "CreateDocumentDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the document",
            "example": "Company Mission Statement"
          },
          "content": {
            "type": "string",
            "description": "Full text content of the document",
            "example": "Our mission is to innovate and inspire..."
          }
        },
        "required": [
          "title",
          "content"
        ]
      },
      "UpdateDocumentDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Updated title of the document",
            "example": "New Company Mission Statement"
          },
          "content": {
            "type": "string",
            "description": "Updated content of the document",
            "example": "We have expanded our vision to include global innovation..."
          }
        }
      },
      "AskQuestionDto": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string",
            "description": "The question you want to ask based on the ingested documents",
            "example": "What is the company mission?"
          }
        },
        "required": [
          "question"
        ]
      }
    }
  }
}